// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MsgImg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MsgImg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define MsgImg_max_cdr_typesize 156ULL;
#define MsgImg_max_key_cdr_typesize 0ULL;

MsgImg::MsgImg()
{
    // long m_width
    m_width = 0;
    // long m_height
    m_height = 0;
    // unsigned long long m_frmNum
    m_frmNum = 0;
    // unsigned long long m_timeAcq_us
    m_timeAcq_us = 0;
    // unsigned long long m_timeTx_us
    m_timeTx_us = 0;
    // unsigned long long m_timeRx_us
    m_timeRx_us = 0;
    // char m_encType
    m_encType = 0;
    // unsigned long m_cap
    m_cap = 0;
    // unsigned long m_size
    m_size = 0;
    // sequence<octet> m_data


}

MsgImg::~MsgImg()
{










}

MsgImg::MsgImg(
        const MsgImg& x)
{
    m_width = x.m_width;
    m_height = x.m_height;
    m_frmNum = x.m_frmNum;
    m_timeAcq_us = x.m_timeAcq_us;
    m_timeTx_us = x.m_timeTx_us;
    m_timeRx_us = x.m_timeRx_us;
    m_encType = x.m_encType;
    m_cap = x.m_cap;
    m_size = x.m_size;
    m_data = x.m_data;
}

MsgImg::MsgImg(
        MsgImg&& x) noexcept 
{
    m_width = x.m_width;
    m_height = x.m_height;
    m_frmNum = x.m_frmNum;
    m_timeAcq_us = x.m_timeAcq_us;
    m_timeTx_us = x.m_timeTx_us;
    m_timeRx_us = x.m_timeRx_us;
    m_encType = x.m_encType;
    m_cap = x.m_cap;
    m_size = x.m_size;
    m_data = std::move(x.m_data);
}

MsgImg& MsgImg::operator =(
        const MsgImg& x)
{

    m_width = x.m_width;
    m_height = x.m_height;
    m_frmNum = x.m_frmNum;
    m_timeAcq_us = x.m_timeAcq_us;
    m_timeTx_us = x.m_timeTx_us;
    m_timeRx_us = x.m_timeRx_us;
    m_encType = x.m_encType;
    m_cap = x.m_cap;
    m_size = x.m_size;
    m_data = x.m_data;

    return *this;
}

MsgImg& MsgImg::operator =(
        MsgImg&& x) noexcept
{

    m_width = x.m_width;
    m_height = x.m_height;
    m_frmNum = x.m_frmNum;
    m_timeAcq_us = x.m_timeAcq_us;
    m_timeTx_us = x.m_timeTx_us;
    m_timeRx_us = x.m_timeRx_us;
    m_encType = x.m_encType;
    m_cap = x.m_cap;
    m_size = x.m_size;
    m_data = std::move(x.m_data);

    return *this;
}

bool MsgImg::operator ==(
        const MsgImg& x) const
{

    return (m_width == x.m_width && m_height == x.m_height && m_frmNum == x.m_frmNum && m_timeAcq_us == x.m_timeAcq_us && m_timeTx_us == x.m_timeTx_us && m_timeRx_us == x.m_timeRx_us && m_encType == x.m_encType && m_cap == x.m_cap && m_size == x.m_size && m_data == x.m_data);
}

bool MsgImg::operator !=(
        const MsgImg& x) const
{
    return !(*this == x);
}

size_t MsgImg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MsgImg_max_cdr_typesize;
}

size_t MsgImg::getCdrSerializedSize(
        const MsgImg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void MsgImg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_width;
    scdr << m_height;
    scdr << m_frmNum;
    scdr << m_timeAcq_us;
    scdr << m_timeTx_us;
    scdr << m_timeRx_us;
    scdr << m_encType;
    scdr << m_cap;
    scdr << m_size;
    scdr << m_data;

}

void MsgImg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_frmNum;
    dcdr >> m_timeAcq_us;
    dcdr >> m_timeTx_us;
    dcdr >> m_timeRx_us;
    dcdr >> m_encType;
    dcdr >> m_cap;
    dcdr >> m_size;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void MsgImg::width(
        int32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
int32_t MsgImg::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
int32_t& MsgImg::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void MsgImg::height(
        int32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
int32_t MsgImg::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
int32_t& MsgImg::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member frmNum
 * @param _frmNum New value for member frmNum
 */
void MsgImg::frmNum(
        uint64_t _frmNum)
{
    m_frmNum = _frmNum;
}

/*!
 * @brief This function returns the value of member frmNum
 * @return Value of member frmNum
 */
uint64_t MsgImg::frmNum() const
{
    return m_frmNum;
}

/*!
 * @brief This function returns a reference to member frmNum
 * @return Reference to member frmNum
 */
uint64_t& MsgImg::frmNum()
{
    return m_frmNum;
}

/*!
 * @brief This function sets a value in member timeAcq_us
 * @param _timeAcq_us New value for member timeAcq_us
 */
void MsgImg::timeAcq_us(
        uint64_t _timeAcq_us)
{
    m_timeAcq_us = _timeAcq_us;
}

/*!
 * @brief This function returns the value of member timeAcq_us
 * @return Value of member timeAcq_us
 */
uint64_t MsgImg::timeAcq_us() const
{
    return m_timeAcq_us;
}

/*!
 * @brief This function returns a reference to member timeAcq_us
 * @return Reference to member timeAcq_us
 */
uint64_t& MsgImg::timeAcq_us()
{
    return m_timeAcq_us;
}

/*!
 * @brief This function sets a value in member timeTx_us
 * @param _timeTx_us New value for member timeTx_us
 */
void MsgImg::timeTx_us(
        uint64_t _timeTx_us)
{
    m_timeTx_us = _timeTx_us;
}

/*!
 * @brief This function returns the value of member timeTx_us
 * @return Value of member timeTx_us
 */
uint64_t MsgImg::timeTx_us() const
{
    return m_timeTx_us;
}

/*!
 * @brief This function returns a reference to member timeTx_us
 * @return Reference to member timeTx_us
 */
uint64_t& MsgImg::timeTx_us()
{
    return m_timeTx_us;
}

/*!
 * @brief This function sets a value in member timeRx_us
 * @param _timeRx_us New value for member timeRx_us
 */
void MsgImg::timeRx_us(
        uint64_t _timeRx_us)
{
    m_timeRx_us = _timeRx_us;
}

/*!
 * @brief This function returns the value of member timeRx_us
 * @return Value of member timeRx_us
 */
uint64_t MsgImg::timeRx_us() const
{
    return m_timeRx_us;
}

/*!
 * @brief This function returns a reference to member timeRx_us
 * @return Reference to member timeRx_us
 */
uint64_t& MsgImg::timeRx_us()
{
    return m_timeRx_us;
}

/*!
 * @brief This function sets a value in member encType
 * @param _encType New value for member encType
 */
void MsgImg::encType(
        char _encType)
{
    m_encType = _encType;
}

/*!
 * @brief This function returns the value of member encType
 * @return Value of member encType
 */
char MsgImg::encType() const
{
    return m_encType;
}

/*!
 * @brief This function returns a reference to member encType
 * @return Reference to member encType
 */
char& MsgImg::encType()
{
    return m_encType;
}

/*!
 * @brief This function sets a value in member cap
 * @param _cap New value for member cap
 */
void MsgImg::cap(
        uint32_t _cap)
{
    m_cap = _cap;
}

/*!
 * @brief This function returns the value of member cap
 * @return Value of member cap
 */
uint32_t MsgImg::cap() const
{
    return m_cap;
}

/*!
 * @brief This function returns a reference to member cap
 * @return Reference to member cap
 */
uint32_t& MsgImg::cap()
{
    return m_cap;
}

/*!
 * @brief This function sets a value in member size
 * @param _size New value for member size
 */
void MsgImg::size(
        uint32_t _size)
{
    m_size = _size;
}

/*!
 * @brief This function returns the value of member size
 * @return Value of member size
 */
uint32_t MsgImg::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
uint32_t& MsgImg::size()
{
    return m_size;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void MsgImg::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void MsgImg::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& MsgImg::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& MsgImg::data()
{
    return m_data;
}


size_t MsgImg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MsgImg_max_key_cdr_typesize;
}

bool MsgImg::isKeyDefined()
{
    return false;
}

void MsgImg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

