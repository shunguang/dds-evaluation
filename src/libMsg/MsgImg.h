// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MsgImg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_MSGIMG_H_
#define _FAST_DDS_GENERATED_MSGIMG_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MSGIMG_SOURCE)
#define MSGIMG_DllAPI __declspec( dllexport )
#else
#define MSGIMG_DllAPI __declspec( dllimport )
#endif // MSGIMG_SOURCE
#else
#define MSGIMG_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MSGIMG_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure MsgImg defined by the user in the IDL file.
 * @ingroup MsgImg
 */
class MsgImg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MsgImg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MsgImg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MsgImg that will be copied.
     */
    eProsima_user_DllExport MsgImg(
            const MsgImg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MsgImg that will be copied.
     */
    eProsima_user_DllExport MsgImg(
            MsgImg&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MsgImg that will be copied.
     */
    eProsima_user_DllExport MsgImg& operator =(
            const MsgImg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MsgImg that will be copied.
     */
    eProsima_user_DllExport MsgImg& operator =(
            MsgImg&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MsgImg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MsgImg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MsgImg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MsgImg& x) const;

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            int32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport int32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport int32_t& width();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            int32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport int32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport int32_t& height();

    /*!
     * @brief This function sets a value in member frmNum
     * @param _frmNum New value for member frmNum
     */
    eProsima_user_DllExport void frmNum(
            uint64_t _frmNum);

    /*!
     * @brief This function returns the value of member frmNum
     * @return Value of member frmNum
     */
    eProsima_user_DllExport uint64_t frmNum() const;

    /*!
     * @brief This function returns a reference to member frmNum
     * @return Reference to member frmNum
     */
    eProsima_user_DllExport uint64_t& frmNum();

    /*!
     * @brief This function sets a value in member timeAcq_us
     * @param _timeAcq_us New value for member timeAcq_us
     */
    eProsima_user_DllExport void timeAcq_us(
            uint64_t _timeAcq_us);

    /*!
     * @brief This function returns the value of member timeAcq_us
     * @return Value of member timeAcq_us
     */
    eProsima_user_DllExport uint64_t timeAcq_us() const;

    /*!
     * @brief This function returns a reference to member timeAcq_us
     * @return Reference to member timeAcq_us
     */
    eProsima_user_DllExport uint64_t& timeAcq_us();

    /*!
     * @brief This function sets a value in member timeTx_us
     * @param _timeTx_us New value for member timeTx_us
     */
    eProsima_user_DllExport void timeTx_us(
            uint64_t _timeTx_us);

    /*!
     * @brief This function returns the value of member timeTx_us
     * @return Value of member timeTx_us
     */
    eProsima_user_DllExport uint64_t timeTx_us() const;

    /*!
     * @brief This function returns a reference to member timeTx_us
     * @return Reference to member timeTx_us
     */
    eProsima_user_DllExport uint64_t& timeTx_us();

    /*!
     * @brief This function sets a value in member timeRx_us
     * @param _timeRx_us New value for member timeRx_us
     */
    eProsima_user_DllExport void timeRx_us(
            uint64_t _timeRx_us);

    /*!
     * @brief This function returns the value of member timeRx_us
     * @return Value of member timeRx_us
     */
    eProsima_user_DllExport uint64_t timeRx_us() const;

    /*!
     * @brief This function returns a reference to member timeRx_us
     * @return Reference to member timeRx_us
     */
    eProsima_user_DllExport uint64_t& timeRx_us();

    /*!
     * @brief This function sets a value in member encType
     * @param _encType New value for member encType
     */
    eProsima_user_DllExport void encType(
            char _encType);

    /*!
     * @brief This function returns the value of member encType
     * @return Value of member encType
     */
    eProsima_user_DllExport char encType() const;

    /*!
     * @brief This function returns a reference to member encType
     * @return Reference to member encType
     */
    eProsima_user_DllExport char& encType();

    /*!
     * @brief This function sets a value in member cap
     * @param _cap New value for member cap
     */
    eProsima_user_DllExport void cap(
            uint32_t _cap);

    /*!
     * @brief This function returns the value of member cap
     * @return Value of member cap
     */
    eProsima_user_DllExport uint32_t cap() const;

    /*!
     * @brief This function returns a reference to member cap
     * @return Reference to member cap
     */
    eProsima_user_DllExport uint32_t& cap();

    /*!
     * @brief This function sets a value in member size
     * @param _size New value for member size
     */
    eProsima_user_DllExport void size(
            uint32_t _size);

    /*!
     * @brief This function returns the value of member size
     * @return Value of member size
     */
    eProsima_user_DllExport uint32_t size() const;

    /*!
     * @brief This function returns a reference to member size
     * @return Reference to member size
     */
    eProsima_user_DllExport uint32_t& size();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MsgImg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_width;
    int32_t m_height;
    uint64_t m_frmNum;
    uint64_t m_timeAcq_us;
    uint64_t m_timeTx_us;
    uint64_t m_timeRx_us;
    char m_encType;
    uint32_t m_cap;
    uint32_t m_size;
    std::vector<uint8_t> m_data;

};

#endif // _FAST_DDS_GENERATED_MSGIMG_H_

